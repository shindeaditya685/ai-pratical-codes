public class NQueens {

    public static boolean solveNQueens(int n, char[][] board, int col) {
        if (col >= n) {
            // All queens are placed successfully
            return true;
        }

        // Consider this column and try placing queen in all rows one by one
        for (int row = 0; row < n; row++) {
            if (isSafe(board, row, col)) {
                // Place this queen in the board
                board[row][col] = 'Q';

                // Recursively proceed to place rest of the queens
                if (solveNQueens(n, board, col + 1)) {
                    return true;
                }

                // If placing queen in current row doesn't lead to a solution,
                // then backtrack and remove queen from this row
                board[row][col] = '.';
            }
        }

        // If queen can't be placed in any row in this column, then return false
        return false;
    }

    public static boolean isSafe(char[][] board, int row, int col) {
        // Check for row and column conflicts
        for (int i = 0; i < col; i++) {
            if (board[row][i] == 'Q') {
                return false;
            }
        }

        // Check for diagonal conflicts in upper left
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // Check for diagonal conflicts in lower left
        for (int i = row, j = col; i < board.length && j >= 0; i++, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // No conflict
        return true;
    }

    public static void printSolution(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(" " + board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        // Get the number of queens (N) from the user
        System.out.print("Enter the number of queens: ");
        int n = new java.util.Scanner(System.in).nextInt();

        // Create an NxN chessboard
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.'; // Initialize all cells as empty
            }
        }

        if (solveNQueens(n, board, 0)) {
            System.out.println("Solution exists:");
            printSolution(board);
        } else {
            System.out.println("Solution does not exist");
        }
    }
}
